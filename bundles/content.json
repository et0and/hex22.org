{
  "/blog": {
    "title": "Writings",
    "view": "blog",
    "name": "blog",
    "path": "/content/blog",
    "url": "/blog",
    "files": {},
    "pages": {
      "ntain": {
        "name": "ntain",
        "path": "/content/blog/ntain",
        "url": "/blog/ntain",
        "source": "/content/blog/ntain"
      },
      "are-you-the-owner": {
        "name": "are-you-the-owner",
        "path": "/content/blog/are-you-the-owner",
        "url": "/blog/are-you-the-owner",
        "source": "/content/blog/are-you-the-owner"
      },
      "pictogon": {
        "name": "pictogon",
        "path": "/content/blog/pictogon",
        "url": "/blog/pictogon",
        "source": "/content/blog/pictogon"
      }
    }
  },
  "/p2p": {
    "title": "Peer-to-Peer",
    "view": "default",
    "banner": true,
    "text": "These are the peer-to-peer projects I was / am working on in chronological order:\n\n1. [ntain](https://github.com/kodedninja/ntain) ― Peer-to-Peer file sharing site → 2017\n2. [orkl](https://github.com/kodedninja/orkl) ― Super simple peer-to-peer blogging site → 2018\n3. [solo](https://github.com/kodedninja/solo) ― The simplest publication tool → 2018\n4. [forkup](https://github.com/kodedninja/forkop) ― Updater for forked Beaker sites → 2018\n5. [ridder](https://github.com/kodedninja/ridder) ― An RSS reader that you own → 2018\n6. [seeder](https://github.com/new-computers/seeder) ― Plug-and-play Raspberry Pi DAT seeder → 2018\n7. [Pears](https://github.com/as-dr/pears) ― A peer-to-peer, temporary, collaborative playlist. → 2018 - 2019\n\n---\n\n### Story:\n\nI've been attracted by the peer-to-peer web from a young age ― before I knew actually exists. I remember standing next to a friend and sending a message to him over the internet (I think it was Facebook), when I realized how wrong it is that this message has to travel thousands of kilometers to arrive to him.\n\nSince then I was planning and trying to build my own peer-to-peer networks / protocols, but then one day I've found the [Beaker Browser](https://beakerbrowser.com) and [Dat](https://datproject.org).",
    "name": "p2p",
    "path": "/content/p2p",
    "url": "/p2p",
    "files": {},
    "pages": {}
  },
  "/manifesto": {
    "title": "Manifesto",
    "view": "default",
    "banner": true,
    "text": "1. **Everything should be a tool.** A tool transforms data without adding to its original limitations. It's a function: returns an output for a given input.\n2. **A great tool is [ambient](https://are.na/alex-singh/ambient-product-design).** It should disappear and flow through your actions. You should never need it because it's always at your hands. You should never ignore it because it's never in your way.\n3. **Tools should be adaptable, changeable and personalisable**. If a tool does not perfectly fit your needs, you should be able to change, mix or remove its parts.\n4. **Data should be reusable, text-editable, human-readable.** Produces a higher chance that (1.) is passed.\n5. **Tools should be lightweight, available and timeless.** Computing power or internet speed shouldn't be the limitation for most tasks. It works in the past and in the future.\n6. **Tools should redound to their own redundancy.** Although it's still usable (5.), a tool should redound the total disappearing of the problem or the birth of better tools. A tool should become useless and disappear as fast as possible.\n\n> \"Only through open sources, open standards, human-readable formats and their independencies, might they survive this fleeting age of self-destructing informatics.\" ― Devine Lu Linvega",
    "showonwiki": true,
    "short": "Rules to obey while making",
    "name": "manifesto",
    "path": "/content/manifesto",
    "url": "/manifesto",
    "files": {},
    "pages": {}
  },
  "/wiki/workstation": {
    "title": "Workstation",
    "view": "default",
    "short": "My primary workbench",
    "showonwiki": true,
    "text": "I currently use a 2015 Macbook Pro 13\" with 8GB of RAM and a 2.7Ghz i5 processor.\n\n### Software\n\n- Browser: [Firefox](https://mozilla.org/firefox) / [Beaker](https://beakerbrowser.com/)\n- Terminal: [Hyper](https://hyper.is/)\n- Text Editor: [Atom](https://atom.io/)\n- Design: [Figma](https://figma.com)\n- Window Manager: [Spectacle](https://www.spectacleapp.com/)\n- Audio Workstation: [Ableton Live](https://ableton.com/live)\n- Music: [Spotify](https://spotify.com/) / [cmus](https://cmus.github.io/)\n- Video Player: [IINA](https://lhc70000.github.io/iina/)\n- Calculator: [Numi](https://numi.io/)",
    "name": "workstation",
    "path": "/content/wiki/workstation",
    "url": "/wiki/workstation",
    "files": {},
    "pages": {}
  },
  "/": {
    "title": "Hunor Karamán",
    "view": "home",
    "text": "I’m a _digital explorer_ working on experimental projects with small footprint,  fast websites & solutions for the peer-to-peer web.\n\n---\n\n## Currently\n\nWeb-developer at [GeoGebra](https://geogebra.org)\nExperimenting with [peer-to-peer tools](/p2p)\n\n## Previously\n\nCo-Made [Pictogon](https://pictogon.com)\n\n---\n\nI'm present on [GitHub](https://github.com/kodedninja), [Are.na](https://are.na/hunor-karaman), [Reading Supply](https://reading.supply/@kodedninja) and [Mastodon](https://merveilles.town/@kodedninja).\nYou can contact me via [email](mailto:karamanhunor@pm.me).\n\nEverything I make should pass most of the criterias in my [Manifesto](/manifesto).\n\nI’m a peer.\n\n---\n\nBuilt with Enoki & Choo.\n\n<span class=\"wwb\">dat://11f84fe55630f24f51d3ae446de2c26c94a8ecd9eb8a9bfdda37b175cecc0711/</span>",
    "name": "content",
    "path": "/content",
    "url": "/",
    "files": {},
    "pages": {
      "p2p": {
        "name": "p2p",
        "path": "/content/p2p",
        "url": "/p2p",
        "source": "/content/p2p"
      },
      "blog": {
        "name": "blog",
        "path": "/content/blog",
        "url": "/blog",
        "source": "/content/blog"
      },
      "manifesto": {
        "name": "manifesto",
        "path": "/content/manifesto",
        "url": "/manifesto",
        "source": "/content/manifesto"
      },
      "wiki": {
        "name": "wiki",
        "path": "/content/wiki",
        "url": "/wiki",
        "source": "/content/wiki"
      }
    }
  },
  "/blog/are-you-the-owner": {
    "title": "Are you the owner?",
    "view": "entry",
    "date": "2018-03-20",
    "excerpt": "About peer-to-peer publishing.",
    "location": "Odorheiu Secuiesc",
    "visible": true,
    "text": "On a free and loosely definable space, like the internet, the whole system's based on ownership. Different locations are owned by countries, corporations and people, just like on the surface of the Earth (though it's much more challening to draw the boundaries of the former).\n\nI have this vision about a utopian system where a piece of land has no owner ― it's free to use by anyone, but the permission is restricted to usage only. People are not allowed to expropriate the land ― that means no fence, no legal ownership. I know: this isn't a system that could be realized for many reasons (stealing, lowering soil quality, etc.), but it's a concept I like to think about. We could all work how much we want and get profit based on our effort (professions are metaphorically limited to agriculture). \n\nWe can also apply this to the context of the web.\n\n**What if no subspaces of the internet would be owned?** What is a *subspace* on the internet, anyway? First of all, it must be something that can be seen (metaphorically) as a space ― it's in \"READY state\"^1^ and its emptiness is its functionality. It also has some metadata in order to help you access and specify it (geolocation, IDs, URLs, ...).\n\nWe can initiate many spaces in a context by using different perspectives. As the web is a gigantic network of computers, I would see these ― the **computers** ― **as subspaces**.\n\n*In the HTTP universe* **1 computer** mostly equals to **1 site** as you can access it by the machine's IP address. This limits you in the number of sites you would like to publish: most hosting services don't sell cheap hosting plans for small and simple sites and it's also some time to setup them.\n\n*On the peer-to-peer web* you can start a site anarchistically, without depending on domain name registrars and cloud storage services. There's no need to own a piece of web-land, you're free to have as many sites as you want without the need to pay for anything ― and you don't need another computer besides your personal one.\n\nI see the peer-to-peer web similar to the utopia of not-owning. \n\n―\n\nThe `DatArchive` API has a brilliant function called `isOwner()`. It's very simple: returns `true` if the visitor is the owner of the site and `false` otherwise.\n\nThis removes the need of authentication.\n\nI've got interested in interfaces that use this powerful function. Most content management systems have an isolated panel / admin page, where through authentication you can get permission to edit the content. There's no need for this on the peer-to-peer web: the same interface ― under same `dat://` URL ― can be used to read and to edit the content, without any action from the user. The interface can automatically react to a visitor and to its owner.\n\nI've made two tools that use this concept: [orkl](https://github.com/kodedninja/orkl) and [solo](https://github.com/kodedninja/solo).\n\n### orkl\n\nI wanted to build a peer-to-peer only blog (though, later I've included the `http://` accessibility too). [Orkl](https://orkl-kodedninja.hashbase.io) has a simple, text-focused blog interface. The index page shows all the published entries in a chronological order and that's all it can do. But when you want to start a blog, orkl is in ready state. No setup, no admin registration: just copy the site and you can start publishing.\n\nOther than the few buttons that appear for the owner, it's the same interface for the visitor.\n\n### solo\n\n[Solo](https://solo-kodedninja.hashbase.io) is a publication tool for one-page pubications: the entries are not presented in a collective way, like on blogs, magazines. All the entries exist under different `dat://` URLs. When the owner visits the site the editor appears, when it's just a visitor, the formatted version of the text renders.\n\n---\n\n### References\n\n1. [New Computers Working Group / Ready to Use](dat://newcomputers.group/ready2use.html)",
    "name": "are-you-the-owner",
    "path": "/content/blog/are-you-the-owner",
    "url": "/blog/are-you-the-owner",
    "files": {},
    "pages": {}
  },
  "/wiki": {
    "title": "Wiki",
    "view": "wiki",
    "text": "Collection of additional information, notes, thoughts, logs.",
    "name": "wiki",
    "path": "/content/wiki",
    "url": "/wiki",
    "files": {},
    "pages": {
      "workstation": {
        "name": "workstation",
        "path": "/content/wiki/workstation",
        "url": "/wiki/workstation",
        "source": "/content/wiki/workstation"
      },
      "readings": {
        "name": "readings",
        "path": "/content/wiki/readings",
        "url": "/wiki/readings",
        "source": "/content/wiki/readings"
      }
    }
  },
  "/wiki/readings": {
    "title": "Readings",
    "view": "default",
    "text": "For the books I'm planning to read visit [this channel](https://www.are.na/hunor-karaman/want-to-read-sncwjrjztha) on Are.na.\n\n<u>2019</u>\n\nHaruki Murakami ― **\"Hard-Boiled Wonderland and the End Of The World\"** _(recommended)_\nFranz Enzenhofer ― **\"Understanding SEO\"**\nYuval Noah Harari ― **\"Homo Deus\"**\n\n<u>2018</u>\n\nBartis Attila ― **\"A Nyugalom\"** _(recommended)_\nPotozky László ― **\"Éles\"**\nJean-Paul Sartre ― **\"Nausea\"** _(recommended)_\nAlain de Botton ― **\"Essays on Love\"**\nMichel Houellebecq ― **\"The Map and the Territory\"**\nArthur Schopenhauer ― **\"The Metaphysics of Love\"**\nKurt Vonnegut ― **\"Slaughterhouse-Five\"**\nPotozky László ― **\"Égéstermék\"**\nMichel Houellebecq ― **\"The Possibility of an Island**\" _(recommended)_",
    "showonwiki": true,
    "short": "Tracking all the books I've read",
    "name": "readings",
    "path": "/content/wiki/readings",
    "url": "/wiki/readings",
    "files": {},
    "pages": {}
  },
  "/blog/pictogon": {
    "title": "Redefining image maps",
    "view": "entry",
    "date": "2017-10-20",
    "location": "Odorheiu Secuiesc",
    "excerpt": "Once upon a time images appeared on websites with interactive areas inside. They were called _image maps_.",
    "text": "\"In HTML and XHTML, an image map is a list of coordinates relating to a specific image, created in order to hyperlink areas of the image to different destinations (as opposed to a normal image link, in which the entire area of the image links to a single destination).\" ― [Wikipedia](https://en.wikipedia.org/wiki/Image_map)\n\nI think image maps actualized a desire many of us have: to make something eternally static (object, image) interactive and alive. Sadly, they didn't spread out on the web and searching for clickable areas on an image isn't a habbit. The reason behind these might be the timing and the tools of the age. If you check the [\"Creation and use section\"](https://en.wikipedia.org/wiki/Image_map#Creation_and_use) of the Wikipedia article, you'll see that the recommended programs for image map creation are Dreamweaver, KDE and GIMP (with a plugin). Tools that aren't used anymore or took a turn in an other direction.\n\nDuring the summer of 2017, together with my friend and mentor [Csaba](https://codecanyon.net/user/sekler) we've created [Pictogon](https://pictogon.com) ― a modern image map editor.\n\n![A screenshot of the Pictogon interface](/content/blog/pictogon/Pictogon.png)\n\nIt was fun not only because we built a finished product from scratch in a relatively short period of time, but also because it was the first larger-scale project I've worked on (as for most 18 years olds). As it was just a secondary project for Csaba, I designed the whole infrastructure, built the backend and a part of the front-end, while he designed and coordinated everything with precision. I even built a working recurring billing system!\n\nWe tried to keep everything as simple as possible. An image map editor shouldn't be complicated anyways. You have an image → draw some polygons on it → set their content → save → get the embed code or download → put it onto your website.\n\nWe've also experimented with alternative solutions for the upcoming problems (some of them worked out, some of the didn't). For example we didn't want to spend energy, money and computing power on hosting images. They're large and there are enough hosting services on the web (most users have a website with its own storage, why would they also pay for storing images somewhere else?). So you can only input the URL of an image as a starting point. Pictogon will never store the file, it's just a middle layer, between an image and the frontend, that turns the former into an interactive object.\n\nWe decided to let users download the result and handle the embedding part by themselves. **It's a tool, not a platform.**\n\nWe've released Pictogon (into the wild) on 5. October via [Product Hunt](https://www.producthunt.com/posts/pictogon) (which is the only marketing we've done) and luckily people liked it. So much that it became \"Product of the Day\" and \"#3 Product of the Week\".\n\n### Technical details\n\nThe image maps are `<svg>` elements with the image, a bunch of polygons and a script inside.\n\nThe frontend was built with [jQuery](https://jquery.com) (I know, it wasn't my decision), the editor was built by us from the ground up. The backend is vanilla PHP.\n\n---\n\n### Update\n\nAs of today ― November 02, 2018 ― Pictogon is a settling puddle in our hearts. After its successful launch we were motivated for a few months, but we've started to neglect and don't care. Maybe, it wasn't fully finished at the release and we were tired of it to finish afterwards. I also started digging into building for the peer-to-peer web around that time (and haven't stopped since then). I love this product and hope that someday I can, maybe, rebuild it and relaunch it. Pictogon 2.0, sometime, maybe.",
    "visible": true,
    "name": "pictogon",
    "path": "/content/blog/pictogon",
    "url": "/blog/pictogon",
    "files": {
      "Pictogon.png": {
        "name": "Pictogon",
        "path": "/content/blog/pictogon/Pictogon.png",
        "url": "/blog/pictogon/Pictogon.png",
        "source": "dat://11f84fe55630f24f51d3ae446de2c26c94a8ecd9eb8a9bfdda37b175cecc0711/content/blog/pictogon/Pictogon.png",
        "extension": ".png",
        "filename": "Pictogon.png",
        "type": "image"
      }
    },
    "pages": {}
  },
  "/blog/ntain": {
    "title": "ntain ― a peer-to-peer file sharing site",
    "view": "entry",
    "date": "2017-11-10",
    "location": "Odorheiu Secuiesc",
    "excerpt": "My first try at building a peer-to-peer application based on [Beaker Browser](https://beakerbrowser.com) ― a retrospection.",
    "text": "_This entry was written one year after the events, as it's a very important period and I missed it from my timeline._\n\nOne night I've found many #rotonde tweets with beautiful 64 characters long URL-ish texts in my feed. A few minutes later I've found out that it's a little, \"underground\" social-network. It was peer-to-peer, something I've been interested in for a while, so I've downloaded [Beaker Browser](https://beakerbrowser.com) in an instant and made my profile. It was a slightly abstract way of joining a social-network, love at first sight.\n\nAnd then there were features to build, bugs to fix ― so I've cloned the [repo on GitHub](https://github.com/rotonde) and started contributing. They weren't important, core features, just little \"fine-tunes\", but they made me feel happy and curious.\n\n_It was the time just before the rise of the peer-to-peer web, there were only a few applications and personal sites started to appear on the **dat://** protocol._\n\nSomehow I've hacked together a little site, using the `DatArchive` API that lets you share files easily and beautifully. Honestly, its design was the reason why I've made it. Basically it's just an interface that renders the content of a directory and an event callback for `ondrop` that \"uploads\" the file to the archive. The whole thing made with jQuery.\n\n![Screenshot of the interface of ntain](/content/blog/ntain/ntain.png)\n\nBut (and this is a very important \"but\"), it felt like some yet hidden power on the internet. I was there in my room, launching a modern file-sharing application without the need of a server and buying a domain name. Instantly, the feeling of \"we're building a new internet, just like in the '90s\" rushed through me.\n\nI've shared it on Twitter and people actually liked and used it.\n\n_If ntain were a baby, then everything I've made since then for the peer-to-peer web would be its periods of growing up. It had a determinate role to my current life._\n\n---\n\n[Repository](https://github.com/kodedninja/ntain)\n\n[dat://ntain-kodedninja.hashbase.io](dat://ntain-kodedninja.hashbase.io)",
    "visible": true,
    "name": "ntain",
    "path": "/content/blog/ntain",
    "url": "/blog/ntain",
    "files": {
      "ntain.png": {
        "name": "ntain",
        "path": "/content/blog/ntain/ntain.png",
        "url": "/blog/ntain/ntain.png",
        "source": "dat://11f84fe55630f24f51d3ae446de2c26c94a8ecd9eb8a9bfdda37b175cecc0711/content/blog/ntain/ntain.png",
        "extension": ".png",
        "filename": "ntain.png",
        "type": "image"
      }
    },
    "pages": {}
  }
}